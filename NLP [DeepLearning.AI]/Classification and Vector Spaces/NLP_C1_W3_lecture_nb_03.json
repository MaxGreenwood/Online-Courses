{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Another explanation about PCA\n",
    "\n",
    "\n",
    "<img src = 'pca.jpeg' width=\"width\" height=\"height\"/>\n",
    "<sub>photo credit: Raunak Joshi</sub>\n",
    "\n",
    "\n",
    "In this lab, we are going to view another explanation about Principal Component Analysis(PCA). PCA is a statistical technique invented in 1901 by Karl Pearson that uses orthogonal transformations to map a set of variables into a set of linearly uncorrelated variables called Principal Components. \n",
    "\n",
    "PCA is based on the Singular Value Decomposition(SVD) of the Covariance Matrix of the original dataset. The Eigenvectors of such decomposition are used as a rotation matrix.  The Eigenvectors are arranged in the rotation matrix in decreasing order according to its explained variance. This last term is related to the EigenValues of the SVD.\n",
    "\n",
    "PCA is a potent technique with applications ranging from simple space transformation, dimensionality reduction, and mixture separation from spectral information.\n",
    "\n",
    "Follow this lab to view another explanation for PCA. In this case, we are going to use the concept of rotation matrices applied to correlated random data, just as illustrated in the next picture.\n",
    "\n",
    "<img src=GaussianScatterPCA.svg>\n",
    "\n",
    "Source: https://en.wikipedia.org/wiki/Principal_component_analysis\n",
    "\n",
    "As usual, we must import the libraries that will use in this lab."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np                         # Linear algebra library\n",
    "import matplotlib.pyplot as plt            # library for visualization\n",
    "from sklearn.decomposition import PCA      # PCA library\n",
    "import pandas as pd                        # Data frame library\n",
    "import math                                # Library for math functions\n",
    "import random                              # Library for pseudo random numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To start, let us consider a pair of random variables x, y. Consider the base case when y = n * x. The x and y variables will be perfectly correlated to each other since y is just a scaling of x."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "n = 1  # The amount of the correlation\n",
    "x = np.random.uniform(1,2,1000) # Generate 1000 samples from a uniform random variable\n",
    "y = x.copy() * n # Make y = n * x\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x. Remove its mean\n",
    "y = y - np.mean(y) # Center y. Remove its mean\n",
    "\n",
    "data = pd.DataFrame({'x': x, 'y': y}) # Create a data frame with x and y\n",
    "plt.scatter(data.x, data.y) # Plot the original correlated data in blue\n",
    "\n",
    "pca = PCA(n_components=2) # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally, it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "rotatedData = pcaTr.transform(data) # Transform the data base on the rotation matrix of pcaTr\n",
    "# # Create a data frame with the new variables. We call these new variables PC1 and PC2\n",
    "dataPCA = pd.DataFrame(data = rotatedData, columns = ['PC1', 'PC2']) \n",
    "\n",
    "# Plot the transformed data in orange\n",
    "plt.scatter(dataPCA.PC1, dataPCA.PC2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, what is the direction in which the variables point?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Understanding the transformation model pcaTr\n",
    "\n",
    "As mentioned before, a PCA model is composed of a rotation matrix and its corresponding explained variance. In the next module, we will explain the details of the rotation matrices. \n",
    "\n",
    "* `pcaTr.components_` has the rotation matrix \n",
    "* `pcaTr.explained_variance_` has the explained variance of each principal component"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[ 0.70710678  0.70710678]\n",
      " [-0.70710678  0.70710678]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[1.61770946e-01 1.54578205e-32]\n"
     ]
    }
   ],
   "source": [
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$cos(45^o) = 0.7071$\n",
    "\n",
    "The rotation matrix is equal to:\n",
    "\n",
    "$$R = \\begin{bmatrix} cos(45^o) & sin(45^o) \\\\ -sin(45^o) & cos(45^o) \\end{bmatrix}$$ \n",
    "\n",
    "And $45^o$ is the same angle that form the variables y = 1 * x.\n",
    "\n",
    "Then, PCA has identified the angle in which point the original variables.\n",
    "\n",
    "And the explained Variance is around [0.166 0]. Remember that the Variance of a uniform random variable x ~ U(1, 2), as our x and y, is equal to:\n",
    "\n",
    "$$Var(x) = \\frac {(2 - 1)^2}{12} = 0.083333$$\n",
    "    \n",
    "Then the explained variance given by the PCA can be interpret as\n",
    "\n",
    "$$[Var(x) + Var(y)  \\ 0] = [0.0833 + 0.0833 \\  0] = [0.166 \\ 0]$$\n",
    "\n",
    "Which means that all the explained variance of our new system is explained by our first principal component. \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Correlated Normal Random Variables.\n",
    "\n",
    "Now, we will use a controlled dataset composed of 2 random variables with different variances and with a specific Covariance among them. The only way I know to get such a dataset is, first, create two independent Normal random variables with the desired variances and then combine them using a rotation matrix. In this way, the new resulting variables will be a linear combination of the original random variables and thus be dependent and correlated."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "angle:  45.0\n",
      "rotationMatrix\n",
      "[[ 0.70710678  0.70710678]\n",
      " [-0.70710678  0.70710678]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.lines as mlines\n",
    "import matplotlib.transforms as mtransforms\n",
    "\n",
    "random.seed(100)\n",
    "\n",
    "std1 = 1     # The desired standard deviation of our first random variable\n",
    "std2 = 0.333 # The desired standard deviation of our second random variable\n",
    "\n",
    "x = np.random.normal(0, std1, 1000) # Get 1000 samples from x ~ N(0, std1)\n",
    "y = np.random.normal(0, std2, 1000)  # Get 1000 samples from y ~ N(0, std2)\n",
    "#y = y + np.random.normal(0,1,1000)*noiseLevel * np.sin(0.78)\n",
    "\n",
    "# PCA works better if the data is centered\n",
    "x = x - np.mean(x) # Center x \n",
    "y = y - np.mean(y) # Center y\n",
    "\n",
    "#Define a pair of dependent variables with a desired amount of covariance\n",
    "n = 1 # Magnitude of covariance. \n",
    "angle = np.arctan(1 / n) # Convert the covariance to and angle\n",
    "print('angle: ',  angle * 180 / math.pi)\n",
    "\n",
    "# Create a rotation matrix using the given angle\n",
    "rotationMatrix = np.array([[np.cos(angle), np.sin(angle)],\n",
    "                 [-np.sin(angle), np.cos(angle)]])\n",
    "\n",
    "\n",
    "print('rotationMatrix')\n",
    "print(rotationMatrix)\n",
    "\n",
    "xy = np.concatenate(([x] , [y]), axis=0).T # Create a matrix with columns x and y\n",
    "\n",
    "# Transform the data using the rotation matrix. It correlates the two variables\n",
    "data = np.dot(xy, rotationMatrix) # Return a nD array\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let us print the original and the resulting transformed system using the result of the PCA in the same plot alongside with the 2 Principal Component vectors in red and blue"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Eigenvectors or principal component: First row must be in the direction of [1, n]\n",
      "[[ 0.70645514  0.70775782]\n",
      " [ 0.70775782 -0.70645514]]\n",
      "\n",
      "Eigenvalues or explained variance\n",
      "[0.95650757 0.11039571]\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXYAAAD8CAYAAABjAo9vAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJztnXucVHX9/5+fmZ1dZhdluVWyYJKZlmIgaBaYebdUXDFR0ayvGZWZqYVgF0TLQCk1+2aGl8o0AwM3lK/hNROLFARUUqqfprBogbAo7OzuXD6/P86c2bmc28ycue77+XgoMHvmnM+ZnfP+vD/v9+v9/iitNYIgCEL9EKj0AARBEAR/EcMuCIJQZ4hhFwRBqDPEsAuCINQZYtgFQRDqDDHsgiAIdYYYdkEQhDpDDLsgCEKdIYZdEAShzmioxEVHjBih99tvv0pcWhAEoWZZu3btdq31SLfjKmLY99tvP9asWVOJSwuCINQsSqnXvRwnoRhBEIQ6Qwy7IAhCnSGGXRAEoc4Qwy4IglBniGEXBEGoM8SwC4Ig1BkVkTsKgjBw6FjXycKVm9jaFWFUa5hZJx1I+4S2Sg+rrhHDLghCyehY18lVy14kEo0D0NkV4aplLwKIcS8hEooRBKFkLFy5KWXUTSLROAtXbqrQiAYGYtgFQSgZW7sieb0u+IMYdkEQSsao1nBerwv+IDF2QRB8IztResxBI1m6tjMjHBMOBZl10oEVHGX9Ix67IAi+YCZKO7siaIxE6dK1nZw5sY221jAKaGsNM3/aOEmclhjx2AVB8AW7ROmTr2zjmTnHVmhUAxPx2AVB8AVJlFYPYtgFQfAFSZRWD2LYBUHwhVknHUg4FMx4TRKllUFi7IIg+IKZEJX2AZVHDLsgCL7RPqFNDHkVIKEYQRCEOkM8dkGoYaRzomCFGHZBqFGkc6Jgh4RiBKFGkc6Jgh3isQtCjeK1IEjCNQMP8dgFoUbxUhBk1b/lqmUv0rGus0yj9InubrjuOujrq/RIagIx7IJQo3gpCKqLcM2rr8InPgHf+x48/nilR1MTFG3YlVJjlFJPKqVeVkptVEp9w4+BCYLgTPuENuZPG+fYObHm+7f88Y8waRK8/jo89BB8+tOVHlFN4EeMPQZ8U2v9vFJqL2CtUupRrfXffTi3IAgOuBUEjWoN02lhxKu+f0siAT/8IcydC+PGwbJlsP/+lR5VzVC0x661flNr/Xzy7+8CLwOSmRGEKqAm+7fs2gVnnGGEXs49F/76VzHqeeKrKkYptR8wAfibn+cVBKEwaq5/y8aNhlF/7TX4yU/g618HpSo9qprDN8OulBoMLAUu01q/Y/HzmcBMgH333devywqC4ELN9G9ZsgQuvBAGD4YnnoCjjqr0iGoWX1QxSqkQhlG/V2u9zOoYrfUirfUkrfWkkSNH+nFZQRDqgVgMZs2Cs8+GQw+F558Xo14kRXvsSikF3Am8rLW+sfghCYIwYNi2zTDoTz4JF18MN90EjY2VHlXN44fHPhn4HHCsUmp98r/P+HBeQRDqmeeeg4kT4S9/gV/+En72MzHqPlG0x661XgVIdkMQBO/ccQd87Wuwzz6GYT/ssEqPqK6QylNBEMpHby/MnAlf+hIcfTSsXStGvQRIEzBBqHHSm3y1NofQGnZFotUnbdy8Gc480wjBXHUVfP/7EAy6v0/IGzHsglDDZPdk39kdTf2sqvqzP/mkkSTt6TGqSM84o7LjqXMkFCMINYxVk690Kt7wS2v40Y/g+ONh+HB49lkx6mVAPHZBqHKc+ql7aeZVSMMvX3q4795tFBzdf78RgvnlL2GvvfIei5A/YtgFoYpx2/7OrslXOvk2/Cpmyz1zQmh69V/c+Ycfst/2zajrrzcKkKQ1QNmQUIwgVDFu/dStmnxlc8xBuZXeHes6mbzgCcbOWcHkBU9kbLxRaA93c0L4yHNP0vHryxny7k4uPPcHdJxwnhj1MiMeuyBUMW791NObfNl57k++si3j324eeaE93H/88N/56uO/4tK/LuaF932Qr7Z/m84h7+EfyQmhZhqR1QFi2AWhivHST91s8jV2zgq0xTlMg9yxrpN5yzfSFYnmHGN65E7hHceQzo4dfP+Oq/jUa2tZPO4E5p74VXobjCpSc+IoJLQjFIaEYgShismnn7rTHqgd6zqZdf8GS6NuYk4AVtdUGAY5O2wDwPr1MGkSk9/YwFUnXcLsT1+aMuoAQaVqf3u+GkM8dkGoYrz2U+9Y10l3Xyzn/eYksHDlJqIJK3++H3NiyA7vKEitBHK87XvuMapIhw/nL3cupeNfjZBmxMOhoK0cs2a256tBlNbOv+xSMGnSJL1mzZqyX1cQagGnStJjDhrJk69syzDyQEaow6Q1HGLe1IMdwzQm4VAwZ79UgMkLnrAMy7x/cANP/XcF/PSnRmuAxYvhve+1lEnaxf/bWsM8M+fY/D+gAYxSaq3WepLbceKxC0IV0bGuk1m/30A0bpjh7ErSe1a/kfHvq5a9yKBQwNIrbmlqSBlqN1nkoJB1VNbKqx65ewc/umcBdP4drrgCFiyAUAiw39Qje+LJZ3s+XzT1AwyJsQtCCXGSFVpxzYMbU0bdC5FoPMP4p9PZFUldb9ZJBxJwUBzu7I5y1bIXc8aXHbefuOXvrPjVNzjkv6/CfffBj3+cMup2tE9oY/60cbS1hlEYnrrV6sAKU8HT2RVB0z+ZuX2OAx0JxQhCiciWFYJ9yMNkvzkrfB1DKKhoaWxwTJqmkx0eSd1DX4wLnn+I7z1xB1uGvIeHrv4pX//Gmb6O1Qq7UNBADeN4DcWIxy4IJaLQQp98aQ2HbIuUonHt2ahDbuilfUIb5xwyjBtX3Mi1j/2Cp8YexukX3MSt21vK4jUXqqkf6IhhF4QSUYhRag07hzWyUcC8qQczf9q4vN5nR45k8tVXmXH5DNo3/okbp5zHl878Hu8MGlw2ueIQm88j3zYJAw1JngpCifBS6JOdGDz1o/uw+NnNltLEdNmh+e/zjtzXU/WpF3ISmn/8I8yYwXu6+7jws3P50/6HZxyfPUH5neTsWNfJHgsJZyigPCdeByrisQtCiXArLrJKDC5d28nZR4zJSDTefPZ4/r3gFG46e3zG6zedPZ4ftI9zvJ4bLY3B3IRmIgHXXQef+QyMGcOXvn5bjlGH3Akq+14uX7ye/Twmja1YuHKTZSJ58KAGUcW4IB67IDhQjBfqVlxkF4N/8pVtlolBOymh3fW8yCISGm46e3zqfXPvfob/feQnfPLvf4EZM+D225mxaScvusgVre7FtqjJI3Yhqy4bFZDQjxh2QbChmPa1Jk7GuBSJwfTr2SlK0olE48xbvpHeWIK2N1/j7geuY9+ut7juxK9w8De/Q3tzM+0TmgHn6le3Maf3ovFKQT1rBEBCMYJgS6lVLXYGKqCUL4oTr6GZrkiUY158ij/cfQV79+5hxjnXcfuEU1n4yD9Sx7RPaOOZOcfy2oJTeGbOsTkG2ouxzTf+n0+fHCET8dgFwYZSS+1mnXSgZSuAuNZcvng9ly1eT5tNG4H2CW2uYSLz799csoG4Tb1KMBHnyqd+zZefXcbaUQfx1far+O9ew23v0+6adveSca08e7J77ZMj5CKGXRBsKHUowMnwpsenrdoIrHl9B0vXdrqGicy/WxndYd27uHX5DRz5+gbunnAK3z/uIqLBfnlha3OIyQueSBnVYw4a6XpNJ2WO3eTihFteQbBGQjGCYEM5QgHtE9pI5GnwItE49/1ts+cwUfuENs6c2JbhMR/65j/4v7sv5/A3X+H5eTcy/5RLMox6KKjY3RPLULncu/oNx2ua4Zo2m4nP7nXBf8RjFwQb/AgFmKGLzq4IQaWIa01b1nmGhEN5VYeCvfdrFz5ZurYz9Z6zN6zk+4/+nNh73kfwib9w2GGHMT8rxLKnN5YzJrvpJ/uaVmEZiY2XF+kVIwh5kI/80apXjEkooBg8qIGu7qgnWaJXgkrx4+kfzRiTqY5pjEWZ99htzNiwkj/vN4H553+Ph79/huV53Nr8pmPVt0U6MpYGadsrCD6Tr/zRSlVjEk1o266MxRDXOmdMW7si7PPONn7eMZ/xb/6Dnx15Fj8+6nwS0SBj56ywNLx2+YXs6lc7T1xi45VFYuyC4JF85Y9+qGecWu3akT2mU99+hQd/fRn7v72ZL5/xbRYe/XkSASN3YNcK1y6/cN6R+xbUflcoL2LYBcEj+cof/VDP7D0ov6ZgJp1dESbPf5yXrpjLT345m13hvWm/4EZWfugTlsdnTwZ2PdR/0D6OZ+Ycm6pWvXzx+oJbBgilQ2LsguBCegLUCrve4E4xdq9khz680twX4YaHb+HUV57mpY8fz5eP+RqdcfdJQoFlaKZjXSfzlm+0TfK69ZkX/KGsMXal1F3AqcB/tdaH+HFOQagG3IxzdlOv9SsWcVHfPYwKvM3RofdwqjqL+7H2kr1QiFEfu6OT2x64jg++vYX5n/oCvzjiTIh7i+mkh2aAVCHUrPs3OG6Gnd4yQBKnlccXj10p9UlgN3C3F8MuHrtQKzj1W2nLqgJd9cCtXKsW0az6Usd060bmRC9ieWJKWcZ7/D//xo0P/ZhYsIFLpl7JX/YbX9T52lrDdPfFPCV6FUZDsXx3jRK8U9YdlLTWfwZ2+HEuYQDwwhK46RCY12r8+cKSSo/IFjujriCjZ8rClZu4jN9lGHWAZtXHlQ3+3Z+d3x1IxLniz7/hjmXf59/DRnHa528u2qiDcf9e1TujWsNl2zVKcKZsyVOl1Eyl1Bql1Jpt27aV67JCtfHCEnjwUti1GdDGnw9eWrhxL+Ek0bGu09aQZidGt3ZFGKW2Wx+r3vZtTFbr6yGRd7nr99dy6V8Xs3jcCZx13g10DnmPb9f0ghmSkq3sqoOyGXat9SKt9SSt9aSRI0eW67JCtfH4tRDNesijEeP1fPF7kshi4cpNloZUYcgBO9Z1MnnBE4yds4KAUmzVIyzPs1UP92U8VnzkP6/y4K8v4xOvb+Cqky5h9qcvpbehsWTXsyKoVCrUYqcEkla75UXkjkJ52bUlv9ed8HOSsMDOyzSNffqOQXGtuSE2nW6daVS7dSM3xKb7Mp5s2jc+ybJ7vkUoHuPsGQu4b/zJkGcHxWIJh4IZla7Sarc6kMpTobwMGZ30sC1ezxO9a4t1qKSQScICu+rLNptY8vLEFIjClQ1LGKXeZqsezg2x6b4nThviMb7z5J38z9oHWT3mEC45fTbbW4bmdQ47GWVAGR64nQJmaHOI5sYG11bBooqpLH6pYu4DPgWMAP4DXK21vtPueFHFDGDM8Em6px0Kw2m3GH9//FrDMA8ZDcfNhUOtvd2OdZ0c3vFJ2qzi2kPGwOUvuQ7FTZZnJXU0FR6XL17va48Xr4zcvYOf/WEBR2z5O7cf3s71R3+BWNDZP1MKrB5zq/YA86cZe6hetni99bmA1xacUtjghaLxqoqRAiWh/LywJNeAg73BtzDukxc8wcR3HmVB6I4MJUqEJsLT/td2QjCx06cPbQ5x9WkHpwx8uvEfEg6hlLHnZiDZqdGJqYFVSe99O1v1iKK998O2vMzP/zCfvXr3MPvkS3nwI0cXfK5ssu97wrWP2Kphso8Vyoc0Aat3rIyjizEryTkK4dDpude56RDrePmyLxljzBrb1q4IneSGPhbGpvOTtOOsvHKw31VoZ3eUWfdv4JoHN9LVHc14T/pEkP3ebCP+eGI8ZwX/nJp0RqvtLAjdAVHyN+5a87l1K5j7+O1sGfIeLph+LZtG7pffOVzoiSayL2nLzu4o37x/A5Df5tRC+RCPvRrI18A6hTO8GmY/zuEn81pxrLPMGtu8H1xtVHhmecPp5f12XnlAgUMRZe6lg4pYXNuObmpgVc7KIaGtG3htSYxgSt8tqfe5efRN0V5++MjPOPOlJ3hs/8O54tRv8s6gwd4Hn8RLa4L0z85L296hzSHWzT0x77EIhSMee6GU24vNNrCmZA/sr+ukBvE6Vj/O4Sd2SVWT9LG9sITv6ttoCPQA/d5wow4w6KBzUtu52YVLso16uoHtYjBaw1C1u9/Yxp097CsbluQUJtl1ZWxT21nVeGlK824eZ+XRj+56i1888EM+/N/XuHHKefz0E2ejVWFCttMCq5gXupuh7AZgJ4OZF70gYyJJVwHZJY7TKUXbYcEfRO6YTol10ZYUItnzQzJoew4H41pKjptreOVOmGN+/Foa4j0ZP2pWfXyn6X6Wru3MkCC6YXrbowPbCSgYpnYzPLCbgILRAcPYTg2scjyHXWGSFRpS18o2/ulVqp98dS0P/foyRu/6Dxd+di63TD4XrQJMDaxiVeOlvNo0g1WNl7qOzbzHG0M/Z5jajVJGMnWY2s2PQosy3p+uNZ910oG2xVlC9SOGPZ1S6KLdKiMLMdJ20kAV8D4J2coLlfdzuN2bw89zQoCHTjdCLUPGuI/Z5rMZEv1v3p0UrbztdLy0BLArTMpeGdiFZ9IZxXa+9pfF/Or+eby51whO+/zN/Gn/w4HcScjrxDMvdDcNKneSa1Sx1L1la83bJ7S5hmLCITEf1Yr8ZtLxs3gGvK0A7Aysk67bzrvVce8rjOPmYt15RHubyKzubdlMmDfEMOIPXWF778s3LefEe05k256s1hKHTjdkipO+mDu2UBiOm0vHuk7ewqbCM5F/hacXb9utJYBdYdJv4sezJTGChFZsSViPOYMeTWxJH7Oe/g3LP/JJzvjcj3hj6D4pL/0noVsL6kVjhl+sGKXett0ww23z6UFZhUhC9SCGPZ1CjKwTXlYAVkY6acRsMb1bZfFgeV1hHDod23Sal3DMw7Nz7808367NsOYu23t/p/cdnn79aSYumsiarWvghSV0X38QiXmtvD23jdiaX+aO7aMz6IhP5qplL/LDvrPo01npoWAjdzSe7z7uLOy87cxj7CcMMz4/iD5iOoDWRoJ0TvQiro5dyJS+W/hA771M6bvF+Vrb4nDHHkL/7GHecTO57NRv0RMalOGl2xWVOk084VDQvnMYEGnYm6U9M5na8RHemvdBnlv+i9TPrKpI0+mSGHvVIoY9nUKMrBNOcWzTq84IQSjjTy/KlEOng05Y/8zrCsM27OESjnlhCUTcmnnaTRpbOP/Q83nmwmdQSjHlzk9we8dFNEfeJIBmeGA3DeTeV++GpRnVntkalXgiwSmHjiIcCmbEoZ9pupQbPvRKaiegbBtn5W2n49QSIDs00qASRGi01avbXmtjFG7fAz0aPtfM3Mm/Y1XTN1KThlOoCOwnntZwiPnTxtEXGmL5c62hIbab97GNgIL3sY1D1n43ZdzNXZSCNjOK9H+pXsSwp1OokbXDydNPD5mYIYh5XcafXq9X7ArjADupmks45uHZ3s5vRXJsE0dNZO3MtRxFkJn6Xb5MhF6HqG5jXxedXZFkIvA2mlRmLD2oYxz+/37K3Ye/zvWNd6aMbZvazrTOGzgh9hSQ20pleWIKc6IXsUMbahitIa6NeLjpedvpzq2MbrPq4yehWy0Tm+a1tiRGGDrxhIZHe+D3EXhvEL7cgtqvISN+bllZm0avDtKseiyTqS1NDbRPaKPptB8RV5krHK1hD005n2NY9dH2/A2pf7dPaOPH0z8q/V9qDJE7ZmNVPJONV0nkcXNzteIm+UgLU9fbbIRfdNyYdA44ETb8NleL7nWF8c9H7H9m5/V78tZNstTTgRD07TGSqUNGM+KAE/ljPMR3SbBA9bFex1lKM6Nt/I3XmmagcUhA7trM4euuAjKNVUO8h4sS9/ArjrAtvBlEX8roB+n31J2Kiezi80q5FyTpPQlYGkH9Ow6TQnDyIAhm3lizMsI7VisYrWGHHsxeqodhyoihm9ecGP8HxwXWMyqynbfmjWR+31kMbb4kqfs3CrkeT4znguBjluPfR2+nY11nKuZu1f/l5o/8k8P/9C34Q5mL2wRP1GaBUqUqJs1r51PY88ISo3rSEmV46fleL/396Exjn89n4VQUlN5vJf3zVgHjWq4omHShMXns2gLhodC3G+L9Hq6mPzSylChfIEIYxRLCfKogn8O+DCehFR/ovdfyZ6saL2V0INdI79CD6daDbAuI1jbOZHjAPjEJuQVJC0J30Lw1Aku6oVuTOGUQ6qONtvHzhIYeGi13ZbqyYYnluLPVN+bxDyamoLEuqEpHa+hSezF02o323+lqKm4bQJR1B6WyUgmteTr5SiIPnW4fy/YSMrG6XoqkEdPxfk89nwfLSfJoev3Zn7cno54c26k39oeYGlsyjHryKinOJMSztDAMxfF0cxO9OXF0l6thO0nhnAC187yHsttRWuilQ256YvPKhiU0r9sNv9xj3PyFLQTG2xt1MA5bkzggQ11jhofsxm2njzc/Hbe4vVIwlHeJ/eHr1s+V3TPwwFfyew7LvZNWDe3cVSy1Z9hL3IPblUIkkcUkZb0mQgv5DCxlk0lP25wgHCcWF9IfHg/38WGCPEsLp9HAFaqXc4iw28OKMkbAsV4+oeHxhP02cXZqlWyD26z6uCn0c15rmsFrTTMcZYSpc6D5f03n8VLwC7St2AwP9sD7gzCzBfZxlwsqBUcFNnJDbHpKXWOuGrwoekzMCWZqYJVr3N6kId5jnU+x+13quCF5fegK95OX20GrtENYZmrPsPutNc+XQhKWxSRl85Fa5vsZWI1r2iLY98h+z6aYStT0h8fjfeyN4vc6zMdjR/N7Ynxc7eGf2K8SunUj98aOdfTtAwrOCv7ZtpDHTRmTTlDpVPWmF49dKQi+E2fwr3egno/ClEY4rxmavT96SmGpVbcat10PnK16eCoEk89eHDqyI9f4hZ16v2tD6upmMMvtoDmtMurQg6+9GPtNh9hs1OCtB3fRlDu+6Bhjz8KPz8Dr9VTQkFsOGW0kcf/5iO0kECNAkITnEvUtiRE0qx7Wqi7OIUIczT2EOZUQ0G+8zC6K5wcfy847WpL+VU9geDVxAgRIGElZSrAB0WsxQ/US09Aehg+Hcsbk5ZpaG4sSM9YPhrFvU9tT92B+HucEn8xQu/TqILOiX7aNybuS/b26fqx7At3tu2ib3/GQdyoEtyZzUBN5gvqNsfutNc8XvyWReV2PtKIk68rMvOOI2cdbFh5lEQrDxC8kG3dtMYy6bSUrNORh1Pt0A48nxjOU3ZxAA2tpYX8CnKYiXE0Pca1RwE49ONUa14tRBzI87WDyzwaVSO4aVLhRt/SNtIa/9MJvuqFZwZdacox6Pqhkb5nRge0sDP2CH4UWpYqWGlSCnqR+fm3iQwSzVDRBEgxrbqTNxqibMk9bHy97JRjZ6T5gt9Wj38WAbng5bzlDuiWm9jx2qKwqplrwYbOKvFYDJuFhcPAZ1jLLhrA3KaQKonXc0ti/nRhMhEEZnmUEzcX08CsV5TO6gXsIMxTlqfeKH5iPiGfD36dheQQ2xuDDDXB6GJqs3+znPWxJjCBMj6VS591EEy2B3sI8uWzv227VnE54GMx+rf/fVpLdbBVTVax8S7Ri8AnZQWkg4jVMlf6Q5YuTAQ8Pg953IeFWam5astzvnkYlwyI663XNL4hyKT2MQbGMZj5KeXqVeA2XAPB2HBZHYHsCjmuCTzQ6vjmvc3sYJ1ifr9DrxIKDaDj9p5nG1ouRDDbC6T9LtVl2lezmK9UtBC+y3XKFdAtE+rHXOtkeeSqO7bBK8ZJYLsRLTycasX9vZKeRWHPz2lWAaKCJULw790doVMqjS39d8RUa+SgBPkuEj7OH2wlzHoWHN3xnUxQeiBgu+PnN8IHyPl5+ThAaxZsMp2f08ez/+LWG2iX7e/fAl+3bWsT7+gvwHMN72rsxLXalnl58aJcrK1dIt8SIYS8FxX4BrTbfWJO2N7jdZhx2m1Wkxxe9yBfDwwzdeb4evQp4C8XoOA2xbvvmVA5a+Y8n4+5nE+F8FeFZHedHNBGqZPfwhIaneuHPfbBPAKY3Q2vp0ld9BEErGlXM+xBRBPOoCzCrU8/69zIwNe9W37s/fC2nPiHFri3eKpW9qLkK2ZDGiXQ5bx2GdCUUky9uRtsP1YyXGCb0L1/N8YSH5oZCsq+dzxZ0tuPwstFaaYmimUUvP1F9HKWDLNZh3kfAf1WLGxENyyLwrxiMD8Epg6ChdIPQGu5//1x6Xv0rM4KPG2ojl8tpDU8nDmZKYGNmPD8QMtx8G8NsG//Prkp+4CvWk7EKwqAhxStowP67mB3Lr3PqVxVTSbwUOfihz/WqRzevb44nssN4UEMt/cc0hOGN1f3KF6et1bIVPra7GlXWqAOEUNzMIH6rw6whziS1h9UePVhHBUg+vBWHRbvh1RicOgimltaoA3TqEaz613Y+G3yKBuVu1E2ODGzKMtIKDrsATv9Zf1OyLOx78qR9Pw+dDmfcZr8/gJtRL7ZQz0pnL4hhzwsvRtuPAiqvki8VzB1PvA+iabHryA4jjOPUEiAUhmm393v/pvQRMqWdBe63WUrOJcRqWggDR9PNz+nLqxVBwbzQB3fuMfqN/U8zTHROkhZCtrE1G5N5aeWbjlJYhG00bHwAHr+WUQHnjURysPp+NhTQwlcFva9knYqi6kSi6CfV96RWM16Mth/b1nnZ/zMUdohF52HYVBA+OsP4u9VqBPr7vdglyirMoQR5jsGcQAMXqx7+hx4iDp+B16pRS+IaHu6BB3qgLdkaYHRmqqpXB4np4o38bt2UV4+YvInsgF2bCaBtP48cTz7YmFUvMcRIrHru+Jl2njNu61fNuG2x2OfQvqFcVec1hCRP88FLctKuVa+5bR3Yeyjp8fvw0DRZYXZMWxnG2KHa0zM6bmjSNz5gX3LtNGYf8EPyNxTFg4S5VvdyjerjBR1nGc3s56fv8m7CqCJ9Iw5HNsLxTRmtdrU2jPF3Yl8E4OqGu1MtdSH/exysehlMLwDvUzuYGPiHcZ4ib8MrMQIElClATaK1EdrLqGNwcSTCw4w/TeMfHgafvt5aCmmVFH38WvsELZSuqKmGkeRpPnhNjDollOwSRZYyRIckpZk4dVIl+IV5jw/Pzt8zqwAPEeV8IgRR3EeYE/3wXzbHYEkEejVMDcMh1jLLhIbfxI/nvOAmo0CkAAAgAElEQVQTBJOtChT+RGnMzTEGq17n4yix8beQozocbPQfynYM3Gop0p8Tp4R/DbQB8BNJnpYCr+0EvG5bl74EfeAr9nuIOp2nHBOz6bm3vKf01/KBUwmxhsGMQnEy3czPswVwBlrDs33wq25oVPDFFlujDoZBvSD4WCqxGSgm7JN9bgUtOBt1cwwlxbNRB9DWRj0V9rPBU3jTY4x+ALXrNZFQTL542WEJ3MM2LyzJ9LbzeliS53n8Wvcqz/Awf7xsHYftrxR/njLxQQKspoWLiPBt1ctzOs6vCLN3PmYvqmFFD2yIwoca4IwwDHJ+f9nlltWO1V4EXmop3MKbXj11v/XvNYJ47KXCrVnZw7MLD6GY5/GSNGps6Y9xDjBaUPyWMDfpJpYT4wj28LJDC2ATrYGdCbhrj2HUP9UE57gb9XKglH1r3qrEal9dt+9ttgSymMZ7ld6/oUKIx14qrCrbDjjR+PeymRSsBTf3On38Wm/nMBOxAxSF4jKamECQ6UQ4gj38ijBnOrQiUK/GYGnEsPAzwnBAFbUtwAi1xLUiqGrAwlvtq2u3moXMnjF+NPur9P4NFcIXj10pdbJSapNS6l9KqTl+nLPu6NsDz9/dLycslANOTNOle8BrmX+dc3SyFcEhBPmsijCHHmLZvwet4eleuKcb9lbwpcFVZ9TBKFLaRYv7gdWAlQE94EQs205Pu91ImKarZQrd8ciMq9uKD+pbSVO0YVdKBYGfAZ8GPgKcq5T6SLHnrRnsEjPZX8zIDg9dD10ID8vsGZODVVu/PGP3dcxoAvyJZr6iQ1yv+jiZbrabvct7taF6eaIXxjUYSdJh1Rep1Bpa1bu0etiWzzy+omQb0BeWGFJJK/luujdeTAjFLTlbR82+7PDjm3sE8C+t9ata6z7gd8DpPpy3+nlhCXRcnOlVdFzcv4QstIOiFW4FS2DIylJVonm2tA25eIBDxsCkL+Z3ziqkCcXPCXOXHsQq4kxkD2t29sHte+AfMTi5yUiShiofT7dCKUPf7mV0GsonercjO8Zu+Vzo3JBNMSEUp2ev1BvjVAl+GPY2IH1q3JJ8rTRUk3Tp4dm5XngiarzuZwwvPMz4MrrtXLNspvHntEX5V4k2D7NWMJgccKKxF2qd8D808gwtEIcpe/fwx/cl4IJm+FhTTUhbPO23ShnseqgFR0eiUIPtVMHt9uzbPnuqP9RT5/hh2K2+OzkLQKXUTKXUGqXUmm3bthV2pWrZadycXOxi15Ed/sbwYknvw/Wcyc9k2Zcg1JzfNXZtcdzejjV3We9YX8NMJMjaWDPndiomndwC7xctQd58Z6tzuwnTyOYb87Zrq6HjuD775d52rwrxw7BvAdJdvdHA1uyDtNaLtNaTtNaTRo4cWdiVqkG65KW4Aoov9U8nGjGMat+ePN6zh3x+vV0MZuxvW5K1klbogpKwvnVSLBEjmoL8ct+9GDG4PLsx1RXpKzwnY1pIzDtb4mi1IrB79iu9L3IV4Idhfw44QCk1VinVCJwDLPfhvLlUg3TJ79i5VyI7CjCs3i1qWHdzWmAVOxOD87yGM0U13BqApDaWLvIcZSE9fm5nTA840aaqOolTzPvQ6e4N6Kye/XJvOF+FFL321FrHlFKXACuBIHCX1npj0SOzwksTrlJT7CRi6tDX/ab4Hi9DxrisDLw/4U0qzk9Ctzq/I9SSbAlcxS54jZM+CRba86VsE2l6/NyubmPDbx2UWcmYtxmmcdKr5/vse60Qr1N80XNprf9Pa/0hrfX+Wuvr/DinJaVcYnlNyhY1iSS/yKfeaGz0a3oU4WHGbjb5smuLr1WlZm8TW+I9MPaT1j/S1V0RWc3hIDuqfqGT7eSke9iXv2QYfqfVbU6YxiF2bhdz79szIHq/5Ev1CXWdKNUSK5+krN3kMu12Z1UJZE4K6Q/B7Neg/dZMI21uauFkuIeMNtqflotEHP79tPF3FUCTGUNXGMa9Go3oQAkHFf3Zu8leM69WoDrF/Plm6zCNVezcfPazn4fIjsoIKKqc2jLskOsV+LHcyicp6zS5OG2Q4WVlEUsbg064aNdVWmuBMmLGOpN/mjH0oML3boYZl63CyaIaUarIQFn67lteKESdko5dmMYudt5oMfEMgN4v+VJ7hj0fssMrD11hHW7xKymbYfTpz+SHhxmbZiybae/h2E0utglTbcQv/VTf5Em5neBqMO7VMAY3ivu9FHCDTuqUQrGbFKpBQFED1K9w16pdZ3o5fnr7znwSM25tQLOTNl7bhub7xbTa79SJYFMyWVsDlsmCagmlVMs4qg47D7vQzVl2/weuH2sU5aUnVKtBQFED1K/H7kWWaHoa+SRl7TzrB75inXj1Guax+2KGh1mEZFT+PWDivdSqURdqALvvb6E5oHhfckLIynmJRt0T9WvYvXrAu7bkl5S1O69dRZzXpaPdF/bT12eGd5y2y/OJWgg3CFVE0YbVwzLIdIZEo+6J+g3FOPV8zj4Oit8ZKZ30L6HXpaOVDth8WMzX8tprUhBKjXLvk+6W1HStxUjDdIYGuEbdC/XrsTspVEwK8TS8nBf6v4T5LB2zFT+QKcN0MurhYb5o2jWljyPLiqAOGDLGmzLNaeVs9l93kwmnrilxdK/Ur2G3WrJN+mLxSzgvPSwgcyXg57ZeltcaA7Nfo+PEVcxruIxu3ej1bnKw7Ojm0RBnH+f0PjHuNUw+DpGTMTa9+ePmuhfoSRw9L+o3FAP+LdmstugyPeps1QtY79lYyDi85AmS1+pY18lVy14kEj2CHYE+rmxYwii1HQIBAjphFDzl28o3iVcPXimI6QBBpekKvYfWvv84nk/r6lOZVOOYqor0revSSX9GzK0YIzudt2XctaX/fYkoGfmjxhZDyZWtihE8oXQFXKdJkybpNWvWlP26BWFnuNO9bj/2ZrTipkOs448qaBjptGtNXvAEnV253n1QKRJa8/nBz/JdfRsN8Z7ix+WA1nClvoSH9FGsUl9keMDbTj+lHE96zxUnoy1G3Qll9Pm3+l5bPSNeCA8zivKcni0hA6XUWq31JLfj6ttj9wMnuaL55StVMue4ue6TSpKtFkZ9amBVynPf2jeCxRzFjMCjJS0sUgquYRG9sQTXcAE3hn5OQ4U3XU7vf+NkvP0y6oU276puHH6HnkKGWWouM+/k9mwJBVG/MXa/qGSlWx7x+VGtmQnaqYFVLAjdwejAdgIKRge2c4Z6il3sVfJhNysjFLQ8MYVd2r9NlwtZXGYb63J45GUz6l63P1QeHvNU/skBu9YBnp4Fnfs9ttsRbNfm6tghzSvVtKtbEjHsblR6NxaPvXFmnXQg4VD/g35lwxKaVWZb4GbVR0JrIjQVNJR8DOso9TYAQ5V9KKZPN7ieM5HsGrlDDyZeh36wOwrGHm2trDrjNltjrDW8xUhDeeL2IQ8ZY3Qcvfwl43g71Vd2Yd0LS4zqUC91FUPG5H6PHZ+hCu6Qlg9uDQQrZPTFsLtRI5Vu7RPauPvw11k96Bu82jSDNrXd8rhW9vBc/IN5GWmt4e3EYO6OH8+WxAhP792qhzM1sMr25zEd4L74pyyNtdkxcktiBJdFL+YDvb+lWw8qeUinaoQ6pic+ZAxMuhB2vGoY1fTX0xrPxYKDMt7erRuZpS9h9elPuRtQq0T/abfYH5++1V3Hxd7aBdg9L17UMNXe4MspVFvBrTwleeqFUiVH/cRjAuvtxGCGqt3OfdfTiGvF5dGvsjwxJfWaGebJXhGYdOtG5kQv4sqGJYwO5E4w5lcugSJoYazfTgxmYt+ijNdebZrhecyFslsPooWeyiZQTc8WbH6nyVh1ujrlhSV0PzyXQZG32JoYzh2N5zP+lJm0T2hzOA9G8vLT11t/l+0S9+b47H5udbzT83L9WA+TgzI8/WpkXivWLoFyKE5M+x3niSRP/cQpOVotRt9DAqtbNzpuppGdWOzTDXwrOjPHqF/ZsIQwfcR0gAAJdurBKGWsBrbq4dwQm87yxBRuVrdaXse8RtDGRx6qcvd23apHMNpmFZI+/hiKUNpkEdOKIDpzZyKLBGqvDvLt6IVc3XA3wx3CRyVVzmR7tpa/0+S9md7fG6vhn4/QHHkLhoxm9HFzmZf9/bOranb6ntol7s3xeYmrmwbMaYckuzh7xnmquDDJqbK8gvk5CcUUQ7FLLT/jb45fFiNhdUPoYlqxN1o79GC2JEaQ0IotiRGWRt1MyCoFDcrQxT+UOJLDehfxgd57mdJ3S+o9W/WIgm6li9yE6w2x6a6FV0rBu7Rk3MMV0a/yjejFqddiOmBpmBtIcHPImIjsFrFaw04c9oQNhY0kpJdkZc7gg7mJcTcDEI3Amru8ff/y3cfALXHvZmzNScDtGfF6nmrFKVRbwfyceOzF4EUKaYfXdr5e8bDsG7+ukzc77qGNXM83oeGa2AUZhjwbq4RsQMHngo+xNvGhnPfeEJvuGLKxw8qwLk9MgShJ+ebbqCwv3KSVPRyWFcYBWN5njO3VphmW1zRDQsPVbttY+04GMy96Qc49aQ271F60nnZjMjTyO2PLtnw44zbv+3xmkDVaP+WCTivV4+YaMfZENPdn6SGemw5xfkasVgZW4SY3KrVydlsNuRUvlgjx2IuhmKVWPrs2ecHCc+jWjczbcyYd6zpTrz2tJubsTZrQ8Jv48Y5GHTAqWS0IKMPgZrM8MYU50Ys8J1xNrEIx5vmm9N3CB3rvpdNmNbBVD3c8t5dVhFWkpVs3Mi96QcY9mauC3+oTaAwPNjZSuX5s/kY9PMzaCHntS5RNsUt9LyvJQ6fnbucYHmaoama/1n8/bs+I1cpg2iKYt8v7DmkVTFIC9quhCnaiFI+9GIpp+u93/C35Zel+eC6Dut/qj3X3HkF42YuseX0HPc//jmvVkxkxdtOoXx270PUSTnFuU96Yzdq9T+DoXUdxinqam0O3ekqAuhlnsF4N9OkGwvTwatMMtuoRqVi/2/ucMMMvWsPNoVu5Ui/hhth0pvQZypEvmBW9kWRFr5dEYHahjl3P8gxvcHPue+1aOBez1M9nJemlMM/LM1JsgV8xK+dSU6FOlOKxF0MxUshSxN8Onc4J+tacWHckGue+v23mMn5nGUo5qWGDp9PfEJue4+2bWBljhaGvj2vN8sQUfhM/3vb9Jr06yA0x9wch23PeoQej0QwP7E4VZC0I3ZEhuQyo/ve9nRicsRG3Ey1EMs67MPQLpgZW0dYaZl7LUu9tGqbdbnij+XhwKW9wV+57J13ovxS3DCtJ38MRsl1eDuKxF0MhagMTN9VBgVi1FgCIa20bSnkv2wmHgkSizr3elyemMDH+Dz4XfCzH629T21nVeGmGl6yBhSs3pY67OnYhaxMfSsXJd+oWmlSMFgzDuEMPdo3zZ4/HjJ2varyUYVl9aVIVsMlj9h4UMuLyPRBWfZ7ULQkUTSrzc2lSca5uuJuJXVNING32JsNMD7cU6sFZeX/7HulvbLlEK8mSxr9lu7wcxLAXS6FLrRJ94Ue1hm2bgdmFUtSQ0cz/1Di+uWQDcRcXNtM4G+cyDdtoZXjJREkZ5+yxpBtjP7GbtNJDRF2RKKGAYnYoNwkMuVLGXh2kEevJblhSEulFhukYbikWqz127aSFXiiFkSx1OKJETlItI6GYSpKvBM0D2a0FAMKhIOd+bAxPMSEnFBILDoLj5tI+oc3VqJuYScytekSOt2p6yeXGLimaHiKaGljFkw1fZ5SFKsgK5aGFgaUMM9iYTCqWees2P5KINVJpnYFsl5eDeOx1hlltuHDlJrZ2RRjVGmbWSQfSHnyG2ItPE0hzQDXQMOE8OHQ6Hes6895N1a5tgd3rpcQqKdqtG1Px+qmBVfwotIhGFbM9R3ZoplHFiCcLnLIx9ezpMsw2tR0VCBobMTe22Fd1lgo/kojlCJ34RbUUB1YhYtjrkPYJbf3l5CY3XZuT5FMA/3yEjnWdfHPJhrx7pcQJ0EDu5h3xCiwEs3Xub6nh/FTNYHniSADmhe52NOp2rXYDaPpooJH+9/bRwLzoBZnXjsH1jXcS1r3Gi7s2E1l2CXN+t441e59gTK7ZvxO/8Ss+Xgt7ivpdB1JnSChmoGDzcOtdW7hq2YuewzDpBCyMutPrYN/OoBimBlaxqvHSVOXoZdGvclz8ZwTHTycUNC441KbiVie7R9oNq1OPYFbfzIxl/obDfsijwaMzjpsdWkKY3ozXwvQyq2EJnV0Rrlr2YkY9QUmodCfScuK3eqfOEMNehXSs62TygicYO2cFkxc84Y9BsHm432S4qxrGNI7Z2MW131L2RUBuckevmBOEVd/5BaE7OCH+FE++so2WRvdFqd1kY4Zy/jzoGCb33sLYnnuZ3HsLnWNOZf60cbS1hlFAW2vYVsdvvh6JxjMUQiWhFuPjhSISR0cGnmGvwqb46Zh7l3Z2RdDgn7dn8dDHgoNY0Oe8bFVAg43ls0ocRmhi1b4X5yRw/cacIOz6zl/ZsIStXRG6IkbJ+w7t0OPFAq1hTvQiVnAUu3tiOb8PgGfmHMtrC07hmTnHomwmzvTkrZ0U1TcGUhJxIK1OCmBgGfZKlx57YOHKTTkedL7enpXH3xGfzDz9ZaOgB8XO0Hv5Vs8XXTXjGohErUMrVuX1s/u+yNWvHcyZE9sIlqH/rZPMcVRrODWGa2IX0KszJ5teHbRt6tWpR/D0oGPYq6mBaNYyw/L3YdPSIb3YKnuXq5JQAqVVVTKQVicFUFTyVCl1FjAP+DBwhNa6upusV3PpcRI7r86rt2d6/Obk0NkVYdb9G0BBNH4Ev+II40Cf9rS21KUn4qx44U0aGxSRaGn6/SugIWivzd+qhzPrpAO5bPH61DjTk6tmywXAUk1zR+P5rPvuiYyds8Ly+jm/jzQ1id61ha16ONdH+4u1wqEgs046sMi7FlLUknqnAhSrinkJmAb8woexlJ4aiMvZFRh59fasPP5sj7Mc7Oy26PrnwL8XnML+V/2f5ySuTv7PSeZ4y4Q2Fq7clPo80yeh1nCIluYGOrsiqCjMSjP4N3MOU06ZCcCQcCgVzklnSNhi55+kmkQBz63rZO3KTah0yWmpVTEDjVpQ71SIogy71vplAFXRLWfyoAZKj2eddGCGxw35eXslj+OWADNccu7HxnDP6jc8vy+a0KxQR1l64mv3PgGw/jxNTGPbsW48Z688IVP3nzTCdl9tt6+8peRUEMpE2XTsSqmZwEyAfffdt1yXzaQGSo9tC4w8Ggk7j7+aMb30H7SPA+C3f3vDs3omrjWPNhydEw5q7Y3Rsa4z9bld8+DGjFVEVySaSoI6GeEum5WH3euCUA24Jk+VUo8ppV6y+O/0fC6ktV6ktZ6ktZ40cuTIwkdcDDWiGmif0JahuMjH87NqKRAKKFvJokk4FKTVKrxQBtrSwkw/aB/HPkO8JxnbWsPMnzaOoc2ZYzcNt2ncmy1kj16S0nYhsLIkQgWhQFw9dq318eUYSNmo87icnccPuV6rydDmEFefdjCAbdiiVFiFmbyGk9Lf+04kt6o0Eo3zzSUbuHzxetuqWrdrFRsaE4RKMLDkjhWkJEVHNpge/01njwfg8sXrWbhyk23v8Z3d0ZTnOn/auJKNKx2zsGf+tHE5KxI7b7g1HMpYVQwKBVjz+g7Hytm41o6tEtw87/YJbTnFSFZjFoRqoijDrpQ6Qym1Bfg4sEIptdKfYdUXJSs6yvOaVuoOk/TCm+ywRjqt4VDRxUdDm0OMag2ztSvCNQ9uZPw1j2RMeMccZB2qO3jUXvTG+jX1O7uj3Lv6jYJXGOJ5C/WK0gX0CCmWSZMm6TVrqkfy3rGus+BkpRcmL3jCMqHZ1hrmmTnH+nYdL9d0o601zH7Dwzzz/6y3eLv57PGseX0H965+w8smbTmEggq0vQQzHAoyKBSwDBkFlSqop002Cjz/nrPrAswxitcuVAKl1Fqt9SS34wZ8d0ergp50tYQfFFt05Oc13ejsiji+d83rO7jvb5tzjLjG8Ob39MWIxq2Nb1ApWhobHFcOkWjc1gP3w6jnO5k6VQKLYReqlQEfY/ejhN+NSigr7M49tDnkqH4JKuXoed+7+g1bA9sViTq67Qmt2eVg1N2wa1HgtYqikNBLJSZlQSiWAW/Yy/Hg2u1qVEx81y0Za3fNq087mJYm64Wawt0rdvppUCnHKtdRrWFPk5lVHN/cBcrq9fOO3NcxL2COrZDwicgdhVpkwBv2cjy4fisrvCRj7a4JufuQmmgyNeX5EA4FHScFcyKzmnCyj5s39WDLsf+gfZzt6+vmnsjNZ4+3NPDhUJAfT/9oQZ93KSZlQSg1Az55WovJsUKTsVb3mo5pFO36vNglSINKce7HxnDf3zZbGvegUhmGNT1Z3docQmvYFYk6JjTzSXD7nQwvdXJdELziNXk64A07VO+DazeusXNWWBpYBby24BTbc31zyQZbr9pOrWIa87bWMMccNJKlaztzJsEzJ7blvJ7+82JXJ/OWb8xJuFb75CsIpUBUMXlQ7oZNXiYSJ7VOvh0gzXM5hUrslCwaw5Pf0xvj3tVv0NocoqkhkOFhWyWgoT+uDcYqI9+J02mFIcoUQbBnwMfYy43XYiUntU6+cV87w+uVnd1RuiJRdPLvvbEEN509PtXHxi7RnEhOJIUWZ7mNu7MrUvp9RAWhBhHDXma8yiud1DpmYjQ9UdgTi3PZ4vWWChm/pXnZ43VKQBcjJ/Uy7rJsEi0INYaEYsqMF3llx7pOAjZVlulGtCdtyzrzUNMjXvP6Dp58ZRtbuyK25yqGrUlv2dzIIjuxaq4gLk/uYGT1fje8tCCORONc8+BGCckIQhrisZcZN3mlUzw8PdziFKaIROPcs/qNVPjDb6MO0NocSoVYwDDqZqFQupyzGDmpmzTSZGd3VLx2QUhDDHuZcYuPuyUiTc+0kpWPCsOYZo/TVM+k95AvRgeercV32hzbz0phQah1JBRTZtx2SHJKRKaHG8q9U1Jrcu9Pt2Zf2eNvn9CW6i8T15qgUpw50bsKKV2x1LGuM7U5tdt1BWEgI4a9AjjJK92kjE5x7VJheuFeOkZmh1g61nWydG1nKhwU15qlazuZ9P5hecfF2ye0WWrara4rCAMZCcVUGU6hi3SpJNgbdZdd8ACjICkccv/1p4dN3Lzi7BCLWRTlZ5O1eVMPlhJ/QXBBPPYqwylUM3nBE5706Alt7HOaXkUaULD3oFBO6X52sdQxB41MqWmyw0RO4Z+2rGO/2/FiTs/2dMxJIt+q32I3+xaEgYC0FKgh7FoJWHHz2eMtjV8x7RO89tXpWNfpuM8o9E8EtdanRxAqibQUqBHyMbReE6ZBpSzj+MVuKuLVW164cpOjUTdDJ7KJhSCUBjHsFSRfQ2vl4Vpx7sfGWL7uhyH10lfHKRafLtsspnhJEAR7JHlaBuw2xci33N6qx/rk/Yel9N1BpTj/yH35Qfs4y/fbGczOrohlK4JCsVOoKMho3yubWAhCaRCPvUTYyRLTvfJCdm8qphOlUyjHz71erVYWCjjvyH0zzm23Aunui9GxrlPCMYJQIOKxlwA3WaLplZfbY3Ur0fdrr1erlcVNZ4/PWUmYx2XvwbqzOyrNvQShCMRjLwFe2uRu7Ypw09njLVUhpdJkpyc/7Tx3v+LbXlcW7RPaWLhyU07RkSRRBaFwxGMvAV47F/q9F6oX2ie08cycY233Nq1EfLscG4oLwkBCPPYS4CZLTPfKS7l7k5OU0k5DXokKznx3hBIEwRnx2EuAVSzbqqVtKXHbqakcqwU7NVA2xXSAFAQhF/HYS0A1lL170awXuloods/W7GOr4fMShHpCDHuJKPcG2dmUKm7t1WDnWwxV6c9LEOoJCcXUKaWSUtoZ7Gse3JjxmiREBaFyiGGvU0oVt7YzzNnb00lVqSBUjqIMu1JqoVLqFaXUC0qpB5RSrX4NTCiOUiVHnQxzenGTJEQFoXIUG2N/FLhKax1TSl0PXAXMLn5Ygh94jVvn02Fy1kkHetqeThKiglA5ijLsWutH0v65GvhsccMRyk2+HSbz2Z5OEqKCUBn8jLFfCDzs4/lqGq8a7kqTb4dJkO3pBKHacfXYlVKPAe+z+NF3tNZ/SB7zHSAG3OtwnpnATIB99923oMHWCsVuaFFOCu0wCRJmEYRqxdWwa62Pd/q5UurzwKnAcdphnz2t9SJgERhb4+U5zpqilnYGKrScX8IsglC9FKuKORkjWTpVa93tz5Bqn1rScIt6RRDqj2Jj7P8L7AU8qpRar5S6zYcx1Ty1pOGuRIdJQRBKS7GqmA/6NZB6opo6J3pBwiqCUF9Ir5gSIMlFQRAqiRj2EiFesCAIlUIMuwDkV30qCEJ1I4ZdqCndvSAI7kh3R6Gg6lNBEKoXMexCTenuBUFwRwy7UFO6e0EQ3BHDLkj1qSDUGZI8FUR3Lwh1hhj2GqKUkkTR3QtC/SCGvUYQSaIgCF6RGHuNIJJEQRC8Ioa9RhBJoiAIXhHDXiOIJFEQBK+IYa8RRJIoCIJXJHlaI4gkURAEr4hhryFEkigIghckFCMIglBniGEXBEGoM8SwC4Ig1Bli2AVBEOoMMeyCIAh1hhh2QRCEOkNprct/UaW2Aa8X+PYRwHYfh1Mp5D6qi3q4j3q4B5D7cOL9WuuRbgdVxLAXg1JqjdZ6UqXHUSxyH9VFPdxHPdwDyH34gYRiBEEQ6gwx7IIgCHVGLRr2RZUegE/IfVQX9XAf9XAPIPdRNDUXYxcEQRCcqUWPXRAEQXCg5gy7Uur7SqkXlFLrlVKPKKVGVXpMhaCUWqiUeiV5Lw8opVorPaZCUEqdpZTaqJRKKKVqTsmglDpZKbVJKfUvpdScSo+nEJRSdyml/quUeqnSYykGpdQYpdSTSqmXk9+pb1R6TIWglBqklHpWKbUheR/XlH0MtRaKUUrtrbV+J/n3S9uVSR8AAAK2SURBVIGPaK2/UuFh5Y1S6kTgCa11TCl1PYDWenaFh5U3SqkPAwngF8C3tNZrKjwkzyilgsA/gBOALcBzwLla679XdGB5opT6JLAbuFtrfUilx1MoSql9gH201s8rpfYC1gLtNfj7UECL1nq3UioErAK+obVeXa4x1JzHbhr1JC1Abc1MSbTWj2itY8l/rgZGV3I8haK1fllrXas7ah8B/Etr/arWug/4HXB6hceUN1rrPwM7Kj2OYtFav6m1fj7593eBl4Ga24BAG+xO/jOU/K+sdqrmDDuAUuo6pdRm4DxgbqXH4wMXAg9XehADkDZgc9q/t1CDhqQeUUrtB0wA/lbZkRSGUiqolFoP/Bd4VGtd1vuoSsOulHpMKfWSxX+nA2itv6O1HgPcC1xS2dHa43YfyWO+A8Qw7qUq8XIfNYqyeK0mV4D1hFJqMLAUuCxrhV4zaK3jWuvxGCvxI5RSZQ2RVeXWeFrr4z0e+ltgBXB1CYdTMG73oZT6PHAqcJyu4mRHHr+PWmMLMCbt36OBrRUaiwAkY9JLgXu11ssqPZ5i0Vp3KaX+BJwMlC25XZUeuxNKqQPS/jkVeKVSYykGpdTJwGxgqta6u9LjGaA8BxyglBqrlGoEzgGWV3hMA5Zk0vFO4GWt9Y2VHk+hKKVGmio3pVQYOJ4y26laVMUsBQ7EUGK8DnxFa91Z2VHlj1LqX0AT8HbypdU1qu45A/gpMBLoAtZrrU+q7Ki8o5T6DHAzEATu0lpfV+Eh5Y1S6j7gUxjdBP8DXK21vrOigyoApdQU4GngRYznG+DbWuv/q9yo8kcpdSjwa4zvVABYorW+tqxjqDXDLgiCIDhTc6EYQRAEwRkx7IIgCHWGGHZBEIQ6Qwy7IAhCnSGGXRAEoc4Qwy4IglBniGEXBEGoM8SwC4Ig1Bn/H6B9uETqnB4XAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(data[:,0], data[:,1]) # Print the original data in blue\n",
    "\n",
    "# Apply PCA. In theory, the Eigenvector matrix must be the \n",
    "# inverse of the original rotationMatrix. \n",
    "pca = PCA(n_components=2)  # Instantiate a PCA. Choose to get 2 output variables\n",
    "\n",
    "# Create the transformation model for this data. Internally it gets the rotation \n",
    "# matrix and the explained variance\n",
    "pcaTr = pca.fit(data)\n",
    "\n",
    "# Create an array with the transformed data\n",
    "dataPCA = pcaTr.transform(data)\n",
    "\n",
    "print('Eigenvectors or principal component: First row must be in the direction of [1, n]')\n",
    "print(pcaTr.components_)\n",
    "\n",
    "print()\n",
    "print('Eigenvalues or explained variance')\n",
    "print(pcaTr.explained_variance_)\n",
    "\n",
    "# Print the rotated data\n",
    "plt.scatter(dataPCA[:,0], dataPCA[:,1])\n",
    "\n",
    "# Plot the first component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[0][0] * std1 * 3], [0, rotationMatrix[0][1] * std1 * 3], 'k-', color='red')\n",
    "# Plot the second component axe. Use the explained variance to scale the vector\n",
    "plt.plot([0, rotationMatrix[1][0] * std2 * 3], [0, rotationMatrix[1][1] * std2 * 3], 'k-', color='green')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The explanation of this chart is as follows:\n",
    "* The rotation matrix used to create our correlated variables took the original uncorrelated variables `x` and `y` and transformed them into the blue points.\n",
    "* The PCA transformation finds out the rotation matrix used to create our correlated variables (blue points). Using the PCA model to transform our data, puts back the variables as our original uncorrelated variables.\n",
    "* The explained Variance of the PCA is \n",
    "\n",
    "$$[1.0094, 0.1125] $$\n",
    "\n",
    "which is approximately\n",
    "\n",
    "$$[1, 0.333 * 0.333] = [std1^2, std2^2],$$\n",
    "\n",
    "the parameters of our original random variables x and y\n",
    "\n",
    "You can use the previous code to try with other standard deviations and correlations and convince your self of this fact.   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy for dimensionality reduction\n",
    "\n",
    "The principal components contained in the rotation matrix, are decreasingly sorted depending on its explained Variance. It usually means that the first components retain most of the power of the data to explain the patterns that **generalize** the data. Nevertheless, for some applications, we are interested in the patterns that explain much less Variance, for example, in novelty detection. \n",
    "\n",
    "In the next figure, we can see the original data and its corresponding projection over the first and second principal components. In other words, data comprised of a single variable."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "nPoints = len(data)\n",
    "\n",
    "# Plot the original data in blue\n",
    "plt.scatter(data[:,0], data[:,1])\n",
    "\n",
    "#Plot the projection along the first component in orange\n",
    "plt.scatter(data[:,0], np.zeros(nPoints))\n",
    "\n",
    "#Plot the projection along the second component in green\n",
    "plt.scatter(np.zeros(nPoints), data[:,1])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## PCA as a strategy to plot complex data\n",
    "\n",
    "The next chart shows a sample diagram displaying a dataset of pictures of cats and dogs. Raw pictures are composed of hundreds or even thousands of features. However, PCA allows us to reduce that many features to only two. In that reduced space of uncorrelated variables, we can easily separate cats and dogs. \n",
    "\n",
    "<img src = 'catdog.png'>\n",
    "\n",
    "You will learn how to generate a chart like this with word vectors in this week's programming assignment."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
